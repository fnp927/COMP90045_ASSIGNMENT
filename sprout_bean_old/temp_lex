{
open Sprout_parse
}

let digit = ['0' - '9']
let alpha = ['a' - 'z' 'A' - 'Z']
let alnum = alpha | digit
let digits = digit+
let ident = alpha alnum*
let typedef_value_init = ident ':' ident
let function_value_init = ident ident

rule token = parse
    [' ' '\t']    { token lexbuf }     (* skip blanks *)
  | '\n'          { Lexing.new_line lexbuf ; token lexbuf }
  (*| '-'?['0'-'9']+ as lxm { INT_CONST(int_of_string lxm) }*)
  | '-'?['0'-'9']+ { INT }
  (* keywords *)
  | ident { IDENTIFIER }
  | '{' { LEFT_PARENTHESIS }
  | '}' { RIGHT_PARENTHESIS }
  | "typedef" {Printf.printf "meet typedef \n" ;flush stdout;TYPEDEF }
  | typedef_value_init  { TYPEDEF_VALUE_INIT }
  | '.' { DOT }
  | "end" { END }
  | "val" { VAL }
  | "ref" { REF }
  | '(' { LEFT_BRACKET }
  | ')' { RIGHT_BRACKET }
  | "while" { WHILE }
  | "do" { DO }
  | "od" { OD }
  | "if" { IF }
  | "then" { THEN }
  | "else" { ELSE }
  | "fi" {FI} 
  | "bool" { BOOL }
  | "int" { INT }
  (*| "true" { BOOL_CONST true }*)
  | "true" {BOOL}
  (*| "false" { BOOL_CONST false }*)
  | "false" {BOOL}
  | "read" { READ }
  | "write" { WRITE }
  (*| ":=" { ASSIGN }*)
  | ":=" {EQ_DOT}
  (*| '(' { LPAREN }*)
  (*| ')' { RPAREN }*)
  | '=' { EQ }
  | '<' { LT }
  | '+' { PLUS }
  | '-' { MINUS }
  | '*' { MUL }
  | ';' { SEMICOLON }
  (*| ident as lxm { IDENT lxm }*)
  | eof { Printf.printf "end file \n";flush stdout;EOF }