(* *)
(* == , this compare refernece, = compare content equality*)
let t_flag = ref true
let t0_free = ref true
let cur_register_count = ref 0

let printBinop singleBinop = match singleBinop with
	| Op_add -> Printf.printf " + "
	| Op_sub -> Printf.printf " - "
	| Op_mul -> Printf.printf " * "
	| Op_div -> Printf.printf " / " 
	| Op_eq -> Printf.printf  " = "
	| Op_lt -> Printf.printf " < "
	| Op_gt -> Printf.printf " > "
	| Op_neq -> Printf.printf " != "
	| Op_lte -> Printf.printf " <= "
	| Op_gte -> Printf.printf " >= "
	| Op_and -> Printf.printf " and "

let rec codegen_arithmatic expr = let local_register_count = !cur_register_count in match expr with
	| Ebool(bool_val) -> (cur_register_count := !cur_register_count+1;
												Printf.printf "T%d" local_register_count)

	| Eint(int_val) -> (cur_register_count := !cur_register_count+1;
											Printf.printf "T%d" local_register_count)

	| Ebinop(expr_one,binop,expr_two) -> (Printf.printf "T%d = " local_register_count;
																				codegen_arithmatic expr_one;
																				printBinop binop;
																				codegen_arithmatic expr_two;
																				cur_register_count := !cur_register_count - 1;
																				Printf.printf "\n")

	| Eident(ident) -> (cur_register_count := !cur_register_count+1;
											Printf.printf "T%d" local_register_count)

	| Ebracket(expr) -> codegen_arithmatic expr

(*dont know why following function does not work when called from other method*)
let inc_cur_register_count() = cur_register_count := !cur_register_count + 1
